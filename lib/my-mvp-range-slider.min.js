(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define("my-mvp-range-slider", [], factory);
	else if(typeof exports === 'object')
		exports["my-mvp-range-slider"] = factory();
	else
		root["my-mvp-range-slider"] = factory();
})(window, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 5);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

// extracted by mini-css-extract-plugin

/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

// extracted by mini-css-extract-plugin

/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

// extracted by mini-css-extract-plugin

/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

// extracted by mini-css-extract-plugin

/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

// extracted by mini-css-extract-plugin

/***/ }),
/* 5 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
// ESM COMPAT FLAG
__webpack_require__.r(__webpack_exports__);

// CONCATENATED MODULE: ./src/model/model.ts
var __assign = (undefined && undefined.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var SliderModel = /** @class */ (function () {
    function SliderModel(options) {
        if (SliderModel.validateInitOptions(options)) {
            this.maxValue = options.maxValue;
            this.minValue = options.minValue;
            this.step = options.step;
        }
        else {
            this.maxValue = 10;
            this.minValue = 0;
            this.step = 1;
        }
        this.observers = new Set();
        this.value = options.value;
        if (options.secondValue !== undefined) {
            this.secondValue = options.secondValue;
        }
        if (options.lockedValues !== undefined) {
            this.lockedValues = new Set(options.lockedValues);
        }
        else {
            this.lockedValues = new Set();
        }
        this.isReadyNotify = true;
        this.isUpdated = true;
    }
    Object.defineProperty(SliderModel.prototype, "value", {
        get: function () {
            return this._value;
        },
        set: function (newValue) {
            if (this._ableToChange('value', newValue)) {
                var oldValue = this._value;
                if (this._value === undefined) {
                    this._value = this._minValue;
                }
                var fixedValue = this._getMultipleStep(newValue);
                if (this._secondValue !== undefined && fixedValue >= this._secondValue) {
                    this._value = this._secondValue;
                    this.isUpdated = false;
                }
                else if (oldValue !== fixedValue) {
                    this._value = fixedValue;
                    this.isUpdated = false;
                }
                if (oldValue !== this._value) {
                    this.notify();
                }
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SliderModel.prototype, "maxValue", {
        get: function () {
            return this._maxValue;
        },
        set: function (newValue) {
            if (this._ableToChange('maxValue', newValue)) {
                this._maxValue = newValue;
                this.isUpdated = false;
                if (this._value !== undefined) {
                    this.value = this._value;
                }
                if (this._secondValue !== undefined) {
                    this.secondValue = this._secondValue;
                }
                if (!this.isUpdated) {
                    this.notify();
                }
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SliderModel.prototype, "minValue", {
        get: function () {
            return this._minValue;
        },
        set: function (newValue) {
            if (this._ableToChange('minValue', newValue)) {
                this._minValue = newValue;
                this.isUpdated = false;
                if (this._secondValue !== undefined) {
                    this.secondValue = this._secondValue;
                }
                if (this._value !== undefined) {
                    this.value = this._value;
                }
                if (!this.isUpdated) {
                    this.notify();
                }
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SliderModel.prototype, "step", {
        get: function () {
            return this._step;
        },
        set: function (newValue) {
            if (this._ableToChange('step', newValue)) {
                this._step = +newValue.toFixed(17);
                this.isUpdated = false;
                if (this._value !== undefined) {
                    this.value = this._value;
                }
                if (this._secondValue !== undefined) {
                    this.secondValue = this._secondValue;
                }
                if (!this.isUpdated) {
                    this.notify();
                }
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SliderModel.prototype, "secondValue", {
        get: function () {
            return this._secondValue;
        },
        set: function (newValue) {
            if (this._ableToChange('secondValue', newValue)) {
                var _a = this, _value = _a._value, oldValue = _a._secondValue;
                if (newValue !== undefined) {
                    var fixedValue = this._getMultipleStep(newValue);
                    if (fixedValue <= _value) {
                        this._secondValue = _value;
                        this.isUpdated = oldValue === _value;
                    }
                    else if (oldValue !== fixedValue) {
                        this._secondValue = fixedValue;
                        this.isUpdated = false;
                    }
                }
                else {
                    this._secondValue = undefined;
                }
                if (oldValue !== this._secondValue) {
                    this.notify();
                }
            }
        },
        enumerable: true,
        configurable: true
    });
    SliderModel.prototype.addObserver = function (observer) {
        this.observers.add(observer);
    };
    SliderModel.prototype.removeObserver = function (observer) {
        this.observers.delete(observer);
    };
    SliderModel.prototype.getState = function () {
        var state = {
            maxValue: this._maxValue,
            minValue: this._minValue,
            value: this._value,
            step: this._step,
            lockedValues: Array.from(this.lockedValues),
        };
        if (this._secondValue !== undefined) {
            state.secondValue = this._secondValue;
        }
        return state;
    };
    SliderModel.prototype.updateState = function (state) {
        var newState = __assign(__assign({}, this.getState()), state);
        this.isReadyNotify = false;
        if (newState.maxValue > newState.minValue) {
            this._maxValue = newState.maxValue;
            this._minValue = newState.minValue;
        }
        this.step = newState.step;
        this.value = newState.value;
        this.secondValue = newState.secondValue;
        this.isReadyNotify = true;
        if (!this.isUpdated)
            this.notify();
    };
    SliderModel.prototype.lockState = function (props) {
        var _this = this;
        if (Array.isArray(props)) {
            props.forEach(function (valueName) {
                switch (valueName) {
                    case 'minValue':
                        _this.lockedValues.add('minValue');
                        break;
                    case 'maxValue':
                        _this.lockedValues.add('maxValue');
                        break;
                    case 'step':
                        _this.lockedValues.add('step');
                        break;
                    case 'value':
                        _this.lockedValues.add('value');
                        break;
                    case 'secondValue':
                        _this.lockedValues.add('secondValue');
                        break;
                    default:
                        break;
                }
            });
        }
        else if (props === 'all') {
            this.lockedValues.add('maxValue');
            this.lockedValues.add('minValue');
            this.lockedValues.add('step');
            this.lockedValues.add('value');
            this.lockedValues.add('secondValue');
        }
    };
    SliderModel.prototype.unlockState = function (props) {
        var _this = this;
        if (Array.isArray(props)) {
            props.forEach(function (valueName) {
                switch (valueName) {
                    case 'minValue':
                        _this.lockedValues.delete('minValue');
                        break;
                    case 'maxValue':
                        _this.lockedValues.delete('maxValue');
                        break;
                    case 'step':
                        _this.lockedValues.delete('step');
                        break;
                    case 'value':
                        _this.lockedValues.delete('value');
                        break;
                    case 'secondValue':
                        _this.lockedValues.delete('secondValue');
                        break;
                    default:
                        break;
                }
            });
        }
        else if (props === 'all') {
            this.lockedValues.clear();
        }
    };
    SliderModel.prototype.notify = function () {
        if (this._checkObservers() && this.isReadyNotify) {
            this.observers.forEach(function (observer) {
                observer.update();
            });
            this.isUpdated = true;
        }
    };
    SliderModel.prototype._checkObservers = function () {
        return (this.observers !== undefined && this.observers.size !== 0);
    };
    SliderModel.prototype._getMultipleStep = function (value) {
        var _a = this, step = _a._step, max = _a._maxValue, min = _a._minValue;
        var result;
        switch (true) {
            case (value >= max):
                result = max;
                break;
            case (value <= min):
                result = min;
                break;
            case (((value % step) / step > 0.5)):
                result = (value - (value % step) + step);
                break;
            default:
                result = (value - (value % step));
                break;
        }
        return SliderModel.fixVal(result, step);
    };
    SliderModel.prototype._isLocked = function (value) {
        return (this.lockedValues !== undefined && this.lockedValues.has(value));
    };
    SliderModel.prototype._ableToChange = function (value, newValue) {
        var isValid = SliderModel._validate(newValue);
        var isLocked = this._isLocked(value);
        var isEqual;
        var isUndefined;
        var isGreaterThenMin;
        var isLessThenMax;
        switch (value) {
            case 'value':
                return (isValid && !isLocked);
            case 'secondValue':
                return (newValue === undefined) || (isValid && !isLocked);
            case 'maxValue':
                isEqual = (newValue === this._maxValue);
                isUndefined = (this._maxValue === undefined);
                isGreaterThenMin = (this._minValue === undefined || newValue > this._minValue);
                return isUndefined || (isValid && !isLocked && !isEqual && isGreaterThenMin);
            case 'minValue':
                isEqual = (newValue === this._minValue);
                isUndefined = (this._minValue === undefined);
                isLessThenMax = (this._maxValue === undefined || newValue < this._maxValue);
                return isUndefined || (isValid && !isLocked && !isEqual && isLessThenMax);
            case 'step':
                isEqual = (newValue === this._step);
                isUndefined = (this._step === undefined);
                return isUndefined || (isValid && !isLocked && !isEqual && (newValue > 0));
            default:
                return false;
        }
    };
    SliderModel._validate = function (value) {
        return !(value === null || Number.isNaN(value) || !Number.isFinite(value));
    };
    SliderModel.validateInitOptions = function (options) {
        var hasMaxVal = Object.prototype.hasOwnProperty.call(options, 'maxValue');
        var hasMinVal = Object.prototype.hasOwnProperty.call(options, 'minValue');
        var hasStep = Object.prototype.hasOwnProperty.call(options, 'step');
        var isMaxGreaterMin = options.maxValue > options.minValue;
        var isStepPositive = options.step > 0;
        return hasMaxVal && hasMinVal && hasStep && isMaxGreaterMin && isStepPositive;
    };
    SliderModel.fixVal = function (value, baseVal) {
        if (!(baseVal % 1)) {
            return +value.toFixed(0);
        }
        var base = ("" + baseVal).split('.')[1].length;
        var fixedVal = +value.toFixed(base);
        return fixedVal;
    };
    return SliderModel;
}());
/* harmony default export */ var model = (SliderModel);

// CONCATENATED MODULE: ./src/presenter/presenter.ts
var presenter_assign = (undefined && undefined.__assign) || function () {
    presenter_assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return presenter_assign.apply(this, arguments);
};

var presenter_SliderPresenter = /** @class */ (function () {
    function SliderPresenter(options) {
        this.model = options.model;
        this.view = options.view;
        if (options.dataValues !== undefined && options.dataValues.length) {
            this.updateDataValues(options.dataValues);
        }
        else {
            this.dataValues = [];
        }
        this.renderData = this.createDataValues();
        this.callbacks = {
            onStart: options.onStart,
            onChange: options.onChange,
            onFinish: options.onFinish,
            onUpdate: options.onUpdate,
        };
        this.isChanging = false;
        this.subscribeToModel();
        this.subscribeToView();
        this.renderView();
    }
    SliderPresenter.prototype.update = function (options) {
        var modelOptions = {
            maxValue: options.maxValue,
            minValue: options.minValue,
            step: options.step,
            value: options.value,
        };
        if (Object.prototype.hasOwnProperty.call(options, 'secondValue')) {
            modelOptions.secondValue = options.secondValue;
        }
        var viewOptions = {
            isHorizontal: options.isHorizontal,
            range: options.range,
            dragInterval: options.dragInterval,
            runner: options.runner,
            bar: options.bar,
            scale: options.scale,
            scaleStep: options.scaleStep,
            displayScaleValue: options.displayScaleValue,
            displayValue: options.displayValue,
            displayMin: options.displayMin,
            displayMax: options.displayMax,
            prefix: options.prefix,
            postfix: options.postfix,
        };
        if (!SliderPresenter.isEmpty(viewOptions)) {
            this.view.update(viewOptions);
        }
        if (!SliderPresenter.isEmpty(modelOptions) || Object.prototype.hasOwnProperty.call(options, 'secondValue')) {
            this.model.updateState(modelOptions);
        }
        this.callbacks.onUpdate();
    };
    SliderPresenter.prototype.getAllData = function () {
        var data = presenter_assign(presenter_assign(presenter_assign({}, this.getModelData()), this.getViewData()), this.getPresenterData());
        return data;
    };
    SliderPresenter.prototype.getModelData = function () {
        return this.model.getState();
    };
    SliderPresenter.prototype.getViewData = function () {
        return this.view.getData();
    };
    SliderPresenter.prototype.getPresenterData = function () {
        return {
            dataValues: this.dataValues,
            renderData: this.renderData,
        };
    };
    SliderPresenter.prototype.setUserData = function (data) {
        if (Array.isArray(data) && data.length > 0) {
            this.updateDataValues(data);
            this.renderData = this.createDataValues();
        }
        else if (!Array.isArray(data) && model.validateInitOptions(data)) {
            this.dataValues = [];
            this.model.unlockState(['maxValue', 'minValue', 'step']);
            if (Object.prototype.hasOwnProperty.call(data, 'lockedValues')) {
                this.model.lockState(data.lockedValues);
            }
            this.model.updateState(data);
        }
    };
    SliderPresenter.prototype.createDataValues = function (data) {
        if (this.dataValues.length > 0) {
            return this.dataValues;
        }
        var _a = data || this.model.getState(), min = _a.minValue, max = _a.maxValue, step = _a.step;
        var values = [];
        for (var i = min; i <= max; i += step) {
            var fixed = model.fixVal(i, step);
            values.push(fixed);
        }
        if (values[values.length - 1] < max) {
            values.push(max);
        }
        return values;
    };
    SliderPresenter.prototype.subscribeToModel = function () {
        var _this = this;
        this.modelObserver = {
            update: function () {
                var updatedModelState = _this.getModelData();
                _this.renderData = _this.createDataValues(updatedModelState);
                if (_this.isChanging) {
                    _this.callbacks.onChange(updatedModelState);
                }
                _this.renderView();
            },
        };
        this.model.addObserver(this.modelObserver);
    };
    SliderPresenter.prototype.subscribeToView = function () {
        var _this = this;
        this.viewObserver = {
            start: function () {
                _this.callbacks.onStart(_this.getModelData());
            },
            change: function (values) {
                _this.isChanging = true;
                var convertedValues = _this.convertPercentToValue(values);
                if (Array.isArray(convertedValues)) {
                    var newValue = convertedValues[0], newSecondValue = convertedValues[1];
                    _this.model.updateState({ value: newValue, secondValue: newSecondValue });
                }
                else {
                    _this.model.updateState({ value: convertedValues });
                }
            },
            finish: function () {
                _this.callbacks.onFinish(_this.getModelData());
            },
        };
        this.view.addObserver(this.viewObserver);
    };
    SliderPresenter.prototype.renderView = function () {
        var values;
        var currentValue = this.getModelData().value;
        var secondValue = this.getModelData().secondValue;
        if (this.getViewData().range && secondValue !== undefined) {
            values = [currentValue, secondValue];
        }
        var value = values || currentValue;
        var percentage = this.convertValueToPercent(value);
        var percentageData = this.createPercentageData();
        var viewRenderData = {
            data: this.renderData,
            percentageData: percentageData,
            value: value,
            percentage: percentage,
        };
        this.view.render(viewRenderData);
    };
    SliderPresenter.prototype.updateDataValues = function (values) {
        this.dataValues = values;
        this.model.updateState({
            maxValue: values.length - 1,
            minValue: 0,
            step: 1,
        });
        this.model.lockState(['maxValue', 'minValue', 'step']);
    };
    SliderPresenter.prototype.convertPercentToValue = function (percentage) {
        var _a = this.getModelData(), minValue = _a.minValue, maxValue = _a.maxValue;
        var value;
        var secondValue;
        var values;
        if (Array.isArray(percentage)) {
            var firstPercent = percentage[0], secondPercent = percentage[1];
            value = ((maxValue - minValue) / 100) * firstPercent + minValue;
            secondValue = ((maxValue - minValue) / 100) * secondPercent + minValue;
            values = [value, secondValue];
        }
        else {
            values = ((maxValue - minValue) / 100) * percentage + minValue;
        }
        return values;
    };
    SliderPresenter.prototype.convertValueToPercent = function (values) {
        var _a = this.getModelData(), minValue = _a.minValue, maxValue = _a.maxValue, step = _a.step;
        var firstPercentage;
        var secondPercentage;
        var percentage;
        var baseValue = step / (maxValue - minValue);
        if (Array.isArray(values)) {
            var firstValue = values[0], secondValue = values[1];
            firstPercentage = ((firstValue - minValue) / (maxValue - minValue)) * 100;
            var fixedFirst = model.fixVal(firstPercentage, baseValue);
            secondPercentage = ((secondValue - minValue) / (maxValue - minValue)) * 100;
            var fixedSecond = model.fixVal(secondPercentage, baseValue);
            percentage = [fixedFirst, fixedSecond];
        }
        else {
            var p = ((values - minValue) / (maxValue - minValue)) * 100;
            percentage = model.fixVal(p, baseValue);
        }
        return percentage;
    };
    SliderPresenter.prototype.createPercentageData = function () {
        var _a = this.model.getState(), min = _a.minValue, max = _a.maxValue, step = _a.step;
        var values = [];
        var baseValue = step / (max - min);
        for (var i = min; i <= max; i += step) {
            var fixed = model.fixVal(i, baseValue);
            values.push(fixed);
        }
        if (values[values.length - 1] < max) {
            values.push(max);
        }
        var percentageData = values.map(function (val) {
            var percentage = ((val - min) / (max - min)) * 100;
            return model.fixVal(percentage, baseValue);
        });
        return percentageData;
    };
    SliderPresenter.isEmpty = function (object) {
        var entries = Object.entries(object);
        var isEmpty = true;
        entries.forEach(function (entry) {
            if (entry[1] !== undefined) {
                isEmpty = false;
            }
        });
        return isEmpty;
    };
    return SliderPresenter;
}());
/* harmony default export */ var presenter = (presenter_SliderPresenter);

// EXTERNAL MODULE: ./src/view/view.css
var view = __webpack_require__(0);

// EXTERNAL MODULE: ./src/scale/scale.css
var scale_scale = __webpack_require__(1);

// CONCATENATED MODULE: ./src/scale/scale.ts
var scale_assign = (undefined && undefined.__assign) || function () {
    scale_assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return scale_assign.apply(this, arguments);
};

var SliderScale = /** @class */ (function () {
    function SliderScale(options) {
        this.$view = options.$viewContainer;
        this.$scale = SliderScale.createScale();
        this.isRendered = false;
    }
    SliderScale.prototype.update = function (opts) {
        var _this = this;
        var currentData = this.$scale.data('options');
        var newData = opts.data, options = opts.options;
        var defaultOptions = {
            isHorizontal: true,
            scaleStep: 1,
            displayScaleStrips: true,
            displayScaleValue: true,
            displayMin: true,
            displayMax: true,
        };
        var scaleOptions = scale_assign(scale_assign(scale_assign({}, defaultOptions), currentData), options);
        this.$scale.data('data', newData);
        this.$scale.data('options', scaleOptions);
        if (scaleOptions.isHorizontal && !this.$scale.hasClass('slider__scale_horizontal')) {
            this.$scale.addClass('slider__scale_horizontal');
        }
        if (!scaleOptions.isHorizontal && this.$scale.hasClass('slider__scale_horizontal')) {
            this.$scale.removeClass('slider__scale_horizontal');
        }
        if (!this.isRendered) {
            this.$view.append(this.$scale);
            this.attachEventHandlers();
            this.isRendered = true;
        }
        var data = newData.data, percentageData = newData.percentageData;
        this.$scale.empty();
        data.forEach(function (elem, idx, arr) {
            var content;
            switch (true) {
                case (!scaleOptions.displayMin && idx === 0):
                case (!scaleOptions.displayMax && idx === (arr.length - 1)):
                    content = '';
                    break;
                case (idx % scaleOptions.scaleStep !== 0):
                    content = '';
                    break;
                default:
                    content = elem.toString();
                    break;
            }
            if (content !== '') {
                var value = percentageData[idx];
                var $elem = SliderScale.createElement(content, value, scaleOptions);
                _this.$scale.append($elem);
                var elemMetrics = $elem[0].getBoundingClientRect();
                if (options.isHorizontal) {
                    switch (value) {
                        case 100:
                            $elem.css({
                                right: '0%',
                                'align-items': 'flex-end',
                            });
                            break;
                        case 0:
                            $elem.css('left', value + "%");
                            break;
                        default:
                            $elem.css({
                                left: "calc(" + value + "% - " + elemMetrics.width / 2 + "px)",
                                'align-items': 'center',
                            });
                            break;
                    }
                }
                else {
                    switch (value) {
                        case 100:
                            $elem.css('bottom', '0%');
                            break;
                        default:
                            $elem.css('top', value + "%");
                            break;
                    }
                }
            }
        });
    };
    SliderScale.prototype.destroy = function () {
        this.$scale.off('click');
        this.$scale.remove();
        this.isRendered = false;
    };
    SliderScale.prototype.attachEventHandlers = function () {
        this.$scale.on('click', this.clickEventListener.bind(this));
    };
    SliderScale.prototype.clickEventListener = function (event) {
        var elem = event.target;
        var selectedVal;
        if (elem.classList.contains('scale__element')) {
            selectedVal = $(elem).data('value');
            var $startEvent = $.Event('startChanging.myMVPSlider');
            this.$view.trigger($startEvent);
            var currentData = this.$scale.data('data').percentage;
            var isSecond = false;
            if (Array.isArray(currentData)) {
                var average = (currentData[1] + currentData[0]) / 2;
                isSecond = selectedVal > average;
            }
            var eventData = [selectedVal, isSecond];
            var $changeEvent = $.Event('changeValue.myMVPSlider');
            this.$view.trigger($changeEvent, eventData);
            var $finishEvent = $.Event('finish.myMVPSlider');
            this.$view.trigger($finishEvent, eventData);
        }
    };
    SliderScale.createScale = function () {
        var $scaleContainer = $('<span>', {
            class: 'js-slider__scale slider__scale',
        });
        return $scaleContainer;
    };
    SliderScale.createElement = function (content, value, options) {
        var $elem = $('<span>', { class: 'scale__element' });
        $elem.html(content);
        $elem.data('value', value);
        if (options.isHorizontal) {
            $elem.addClass('scale__element_horizontal');
        }
        return $elem;
    };
    return SliderScale;
}());
/* harmony default export */ var src_scale_scale = (SliderScale);

// EXTERNAL MODULE: ./src/bar/bar.css
var bar_bar = __webpack_require__(2);

// CONCATENATED MODULE: ./src/bar/bar.ts
var bar_assign = (undefined && undefined.__assign) || function () {
    bar_assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return bar_assign.apply(this, arguments);
};

var SliderBar = /** @class */ (function () {
    function SliderBar(options) {
        this.$view = options.$viewContainer;
        this.$bar = SliderBar.createBar();
        this.isRendered = false;
    }
    SliderBar.prototype.update = function (opts) {
        var currentData = this.$bar.data('options');
        var options = opts.options, data = opts.data;
        var defaultOptions = {
            isHorizontal: true,
            range: true,
            dragInterval: false,
        };
        var newData = bar_assign(bar_assign(bar_assign({}, defaultOptions), currentData), options);
        this.$bar.data('options', newData);
        this.$bar.data('data', data);
        if (!newData.isHorizontal && this.$bar.hasClass('slider__bar_horizontal')) {
            this.$bar.removeClass('slider__bar_horizontal');
        }
        else if (newData.isHorizontal && !this.$bar.hasClass('slider__bar_horizontal')) {
            this.$bar.addClass('slider__bar_horizontal');
        }
        if (newData.range) {
            this.createRangeElement();
        }
        if (!newData.range && this.$range) {
            this.destroyRangeElement();
        }
        if (!this.isRendered) {
            this.$view.append(this.$bar);
            this.isRendered = true;
            this.attachEventHandlers();
        }
    };
    SliderBar.prototype.destroy = function () {
        this.$bar.off('click');
        this.$bar.remove();
        this.isRendered = false;
    };
    SliderBar.prototype.attachEventHandlers = function () {
        this.$bar.on('click', this.clickHandler.bind(this));
    };
    SliderBar.prototype.clickHandler = function (event) {
        var $startEvent = $.Event('startChanging.myMVPSlider');
        this.$view.trigger($startEvent);
        var clickCoord;
        var selectedVal;
        var elem = event.currentTarget;
        var elemMetrics = elem.getBoundingClientRect();
        var options = $(elem).data('options');
        if (options.isHorizontal) {
            clickCoord = event.clientX - elemMetrics.x;
            selectedVal = (clickCoord / elemMetrics.width) * 100;
        }
        else {
            clickCoord = event.clientY - elemMetrics.y;
            selectedVal = (clickCoord / elemMetrics.height) * 100;
        }
        var currentData = $(elem).data('data');
        var isSecond = false;
        if (Array.isArray(currentData)) {
            var average = (currentData[1] + currentData[0]) / 2;
            isSecond = selectedVal > average;
        }
        var eventData = [selectedVal, isSecond];
        var $changeEvent = $.Event('changeValue.myMVPSlider');
        this.$view.trigger($changeEvent, eventData);
        var $finishEvent = $.Event('finish.myMVPSlider');
        this.$view.trigger($finishEvent, eventData);
    };
    SliderBar.prototype.createRangeElement = function () {
        var _a = this.$bar.data(), options = _a.options, data = _a.data;
        if (!this.$range) {
            this.$range = $('<div>', { class: 'slider__range' });
            this.$range.data('have-handler', false);
            this.$bar.append(this.$range);
        }
        if (options.isHorizontal) {
            if (Array.isArray(data)) {
                var value = data[0], secondValue = data[1];
                this.$range.css({
                    left: value + "%",
                    width: secondValue - value + "%",
                    'border-radius': '0.75rem',
                });
            }
            else {
                this.$range.css({
                    width: data + "%",
                    'border-top-left-radius': '0.75rem',
                    'border-bottom-left-radius': '0.75rem',
                });
            }
        }
        else if (Array.isArray(data)) {
            var value = data[0], secondValue = data[1];
            this.$range.css({
                top: value + "%",
                height: secondValue - value + "%",
                'border-radius': '0.75rem',
            });
        }
        else {
            this.$range.css({
                height: data + "%",
            });
        }
        var haveHandler = this.$range.data('have-handler');
        var isDragable = options.dragInterval && Array.isArray(data);
        if (isDragable && !haveHandler) {
            this.$range.css({ cursor: 'grab' });
            this.$range.on('mousedown.bar', this.dragStartHandler.bind(this));
            this.$range.data('have-handler', true);
            this.$range[0].onclick = function (e) {
                e.stopPropagation();
            };
            this.$range.on('dragstart.bar', false);
        }
        if (!isDragable && haveHandler) {
            this.$range.css({ cursor: 'default' });
            this.$range.off('mousedown.bar');
            this.$range.data('have-handler', false);
            this.$range[0].onclick = null;
            this.$range.off('dragstart.bar');
        }
    };
    SliderBar.prototype.dragStartHandler = function (event) {
        var _this = this;
        this.$range.css({ cursor: 'grabbing' });
        var startCoord;
        var viewMetrics = this.$view[0].getBoundingClientRect();
        if (this.$bar.data('options').isHorizontal) {
            startCoord = ((event.clientX - viewMetrics.x) / viewMetrics.width) * 100;
        }
        else {
            startCoord = ((event.clientY - viewMetrics.y) / viewMetrics.height) * 100;
        }
        var $startEvent = $.Event('startChanging.myMVPSlider');
        var isDragStarted = true;
        this.$view.trigger($startEvent, [isDragStarted]);
        var dragHandler = this.makeDragHandler(startCoord);
        this.$view.parent('.js-slider__container').on('mousemove.bar', dragHandler);
        document.onmouseup = function () {
            _this.$view.parent('.js-slider__container').off('mousemove.bar', dragHandler);
            _this.$range.css({ cursor: 'grab' });
            var $dropEvent = $.Event('dropRange.myMVPSlider');
            _this.$view.trigger($dropEvent);
            document.onmouseup = null;
        };
    };
    SliderBar.prototype.makeDragHandler = function (start) {
        var _this = this;
        var dragHandler = function (event) {
            var newCoord;
            var viewMetrics = _this.$view[0].getBoundingClientRect();
            if (_this.$bar.data('options').isHorizontal) {
                newCoord = ((event.clientX - viewMetrics.x) / viewMetrics.width) * 100;
            }
            else {
                newCoord = ((event.clientY - viewMetrics.y) / viewMetrics.height) * 100;
            }
            var dragDistance = newCoord - start;
            var $dragRangeEvent = $.Event('dragRange.myMVPSlider');
            _this.$view.trigger($dragRangeEvent, [dragDistance]);
        };
        return dragHandler;
    };
    SliderBar.prototype.destroyRangeElement = function () {
        this.$range.remove();
    };
    SliderBar.createBar = function () {
        var $bar = $('<div>', {
            class: 'js-slider__bar slider__bar',
        });
        return $bar;
    };
    return SliderBar;
}());
/* harmony default export */ var src_bar_bar = (SliderBar);

// EXTERNAL MODULE: ./src/runner/runner.css
var runner_runner = __webpack_require__(3);

// CONCATENATED MODULE: ./src/runner/runner.ts
var runner_assign = (undefined && undefined.__assign) || function () {
    runner_assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return runner_assign.apply(this, arguments);
};

var SliderRunner = /** @class */ (function () {
    function SliderRunner(options) {
        this.$view = options.$viewContainer;
        this.$runner = SliderRunner.createRunner();
        this.isRendered = false;
        this.isSecond = (options.isSecond === true);
    }
    SliderRunner.prototype.update = function (data, options) {
        var currentData = this.$runner.data('options');
        var defaultOptions = { isHorizontal: true };
        var runnerOptions = runner_assign(runner_assign(runner_assign({}, defaultOptions), currentData), options);
        if (runnerOptions.isHorizontal && !this.$runner.hasClass('slider__runner_horizontal')) {
            this.$runner.addClass('slider__runner_horizontal');
        }
        if (!runnerOptions.isHorizontal && this.$runner.hasClass('slider__runner_horizontal')) {
            this.$runner.removeClass('slider__runner_horizontal');
        }
        if (this.isSecond) {
            this.$runner.addClass('runner_second');
        }
        else {
            this.$runner.addClass('runner_first');
        }
        if (!this.isRendered) {
            this.$view.append(this.$runner);
            this.attacheEventHandlers();
            this.isRendered = true;
        }
        var runnerMetrics = this.$runner[0].getBoundingClientRect();
        var runnerWidth = runnerMetrics.width;
        var value;
        var percentage;
        if (Array.isArray(data.percentage) && Array.isArray(data.value)) {
            var _a = data.value, from = _a[0], to = _a[1];
            var _b = data.percentage, fromPercentage = _b[0], toPercentage = _b[1];
            var fromPosition = void 0;
            var toPosition = void 0;
            switch (fromPercentage) {
                case 0:
                    fromPosition = fromPercentage + "%";
                    break;
                default:
                    fromPosition = "calc(" + fromPercentage + "% - " + runnerWidth / 2 + "px)";
                    break;
            }
            switch (toPercentage) {
                case 100:
                    toPosition = "calc(100% - " + runnerWidth + "px)";
                    break;
                default:
                    toPosition = "calc(" + toPercentage + "% - " + runnerWidth / 2 + "px)";
                    break;
            }
            value = this.isSecond ? to : from;
            percentage = this.isSecond ? toPosition : fromPosition;
        }
        if (!Array.isArray(data.percentage) && !Array.isArray(data.value)) {
            switch (data.percentage) {
                case 0:
                    percentage = '0%';
                    break;
                case 100:
                    percentage = "calc(100% - " + runnerWidth + "px)";
                    break;
                default:
                    percentage = "calc(" + data.percentage + "% - " + runnerWidth / 2 + "px)";
                    break;
            }
            value = data.value;
        }
        this.$runner.data('options', runnerOptions);
        this.$runner.data('value', value);
        if (options.isHorizontal) {
            this.$runner.css({ left: percentage });
        }
        else {
            this.$runner.css({ top: percentage });
        }
    };
    SliderRunner.prototype.destroy = function () {
        this.$runner.off('mousedown.runner');
        this.$view.off('mousemove.runner');
        this.$runner.remove();
        this.isRendered = false;
    };
    SliderRunner.prototype.attacheEventHandlers = function () {
        this.$runner.on('mousedown.runner', this.dragStartHandler.bind(this));
        this.$runner.on('dragstart', false);
    };
    SliderRunner.prototype.dragStartHandler = function (event) {
        var _this = this;
        var $startEvent = $.Event('startChanging.myMVPSlider');
        this.$view.trigger($startEvent);
        var runner = event.currentTarget;
        var renderOptions = $(runner).data('options');
        this.$runner.css('cursor', 'grabbing');
        var mouseMoveHandler = this.makeHandler(renderOptions);
        this.$view.parent('.js-slider__container').on('mousemove.runner', mouseMoveHandler);
        document.onmouseup = function () {
            _this.$view.parent('.js-slider__container').off('mousemove.runner', mouseMoveHandler);
            _this.$runner.css('cursor', 'grab');
            var $finishEvent = $.Event('finish.myMVPSlider');
            _this.$view.trigger($finishEvent);
            document.onmouseup = null;
        };
    };
    SliderRunner.prototype.makeHandler = function (opts) {
        var _this = this;
        var moveCoord;
        var selectedVal;
        var view = this.$view[0];
        var elemMetrics = view.getBoundingClientRect();
        var mouseMoveHandler = function (e) {
            if (opts.isHorizontal) {
                moveCoord = e.clientX - elemMetrics.x;
                selectedVal = (moveCoord / elemMetrics.width) * 100;
            }
            else {
                moveCoord = e.clientY - elemMetrics.y;
                selectedVal = (moveCoord / elemMetrics.height) * 100;
            }
            var $changeEvent = $.Event('changeValue.myMVPSlider');
            _this.$view.trigger($changeEvent, [selectedVal, _this.isSecond]);
        };
        return mouseMoveHandler;
    };
    SliderRunner.createRunner = function () {
        var $runner = $('<div>', {
            class: 'js-slider__runner slider__runner',
        });
        return $runner;
    };
    return SliderRunner;
}());
/* harmony default export */ var src_runner_runner = (SliderRunner);

// EXTERNAL MODULE: ./src/values-display/values-display.css
var values_display = __webpack_require__(4);

// CONCATENATED MODULE: ./src/values-display/values-display.ts
var values_display_assign = (undefined && undefined.__assign) || function () {
    values_display_assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return values_display_assign.apply(this, arguments);
};
/* eslint-disable class-methods-use-this */

var SliderValuesDisplay = /** @class */ (function () {
    function SliderValuesDisplay(options) {
        this.$view = options.$viewContainer;
        this.$displayContainer = SliderValuesDisplay.createValuesDisplayContainer();
        this.isRendered = false;
    }
    SliderValuesDisplay.prototype.update = function (data, options) {
        var currentOpts = this.$displayContainer.data('options');
        var defaultOpts = {
            isHorizontal: true,
            prefix: '',
            postfix: '',
        };
        var newOpts = values_display_assign(values_display_assign(values_display_assign({}, defaultOpts), currentOpts), options);
        // update valueDisplay elements
        var value = data.value, percentage = data.percentage;
        if (Array.isArray(value) && Array.isArray(percentage)) {
            if (!this.$firstValDisplay) {
                this.$firstValDisplay = $('<div>', { class: 'slider__display_value' });
                this.$displayContainer.append(this.$firstValDisplay);
            }
            if (!this.$secondValDisplay) {
                this.$secondValDisplay = $('<div>', { class: 'slider__display_value' });
                this.$displayContainer.append(this.$secondValDisplay);
            }
        }
        if (!Array.isArray(value) && !Array.isArray(percentage)) {
            if (!this.$firstValDisplay) {
                this.$firstValDisplay = $('<div>', { class: 'slider__display_value' });
                this.$displayContainer.append(this.$firstValDisplay);
            }
            if (this.$secondValDisplay) {
                this.$secondValDisplay.remove();
                this.$secondValDisplay = undefined;
            }
        }
        this.$displayContainer.data({ options: newOpts, data: data.value });
        if (options.isHorizontal && !this.$displayContainer.hasClass('slider__display_container_horizontal')) {
            this.$displayContainer.addClass('slider__display_container_horizontal');
        }
        if (!options.isHorizontal && this.$displayContainer.hasClass('slider__display_container_horizontal')) {
            this.$displayContainer.removeClass('slider__display_container_horizontal');
        }
        if (!this.isRendered) {
            this.$view.prepend(this.$displayContainer);
            this.isRendered = true;
        }
        this.updateValueDisplay({ renderData: data, options: newOpts });
    };
    SliderValuesDisplay.prototype.destroy = function () {
        this.$displayContainer.remove();
        if (this.$firstValDisplay) {
            this.$firstValDisplay.remove();
            this.$firstValDisplay = null;
        }
        if (this.$secondValDisplay) {
            this.$secondValDisplay.remove();
            this.$secondValDisplay = null;
        }
        this.isRendered = false;
    };
    SliderValuesDisplay.prototype.updateValueDisplay = function (updateData) {
        var renderData = updateData.renderData, options = updateData.options;
        var data = renderData.data, percentage = renderData.percentage, percentageData = renderData.percentageData;
        var firstIdx;
        var secondIdx;
        if (Array.isArray(percentage)) {
            var from = percentage[0], to = percentage[1];
            firstIdx = percentageData.indexOf(from);
            var firstData = data[firstIdx].toString();
            this.$firstValDisplay.data('data', firstData);
            this.$firstValDisplay.data('options', options);
            secondIdx = percentageData.indexOf(to);
            var secondData = data[secondIdx].toString();
            this.$secondValDisplay.data('data', secondData);
            this.$secondValDisplay.data('options', options);
            var firstHtml = options.prefix;
            var secondHtml = options.prefix;
            firstHtml += firstData;
            secondHtml += secondData;
            if (options.postfix !== '') {
                firstHtml += options.postfix;
                secondHtml += options.postfix;
            }
            this.$firstValDisplay.html(firstHtml);
            this.$secondValDisplay.html(secondHtml);
            var firstMetrics = this.$firstValDisplay[0].getBoundingClientRect();
            var secondMetrics = this.$secondValDisplay[0].getBoundingClientRect();
            var firstPos = void 0;
            var secondPos = void 0;
            switch (from) {
                case 0:
                    if (options.isHorizontal) {
                        this.$firstValDisplay.css({ left: '0%' });
                    }
                    else {
                        this.$firstValDisplay.css({ top: '0%' });
                    }
                    break;
                default:
                    if (options.isHorizontal) {
                        firstPos = "calc(" + from + "% - " + firstMetrics.width / 2 + "px)";
                        this.$firstValDisplay.css({ left: firstPos });
                    }
                    else {
                        firstPos = "calc(" + from + "% - " + firstMetrics.height / 2 + "px)";
                        this.$firstValDisplay.css({ top: firstPos });
                    }
                    break;
            }
            switch (to) {
                case 100:
                    if (options.isHorizontal) {
                        secondPos = "calc(" + to + "% - " + secondMetrics.width + "px)";
                        this.$secondValDisplay.css({ left: secondPos });
                    }
                    else {
                        this.$secondValDisplay.css({ down: '0%' });
                    }
                    break;
                default:
                    if (options.isHorizontal) {
                        secondPos = "calc(" + to + "% - " + secondMetrics.width / 2 + "px)";
                        this.$secondValDisplay.css({ left: secondPos });
                    }
                    else {
                        secondPos = "calc(" + to + "% - " + secondMetrics.height / 2 + "px)";
                        this.$secondValDisplay.css({ top: secondPos });
                    }
                    break;
            }
        }
        else {
            firstIdx = percentageData.indexOf(percentage);
            var firstData = data[firstIdx].toString();
            this.$firstValDisplay.data('data', firstData);
            this.$firstValDisplay.data('options', options);
            var firstHtml = options.prefix;
            firstHtml += firstData;
            if (options.postfix !== '')
                firstHtml += options.postfix;
            this.$firstValDisplay.html(firstHtml);
            if (options.isHorizontal) {
                this.$firstValDisplay.css({ left: percentage + "%" });
            }
            else {
                this.$firstValDisplay.css({ top: percentage + "%" });
            }
        }
    };
    SliderValuesDisplay.createValuesDisplayContainer = function () {
        var $displayContainer = $('<div>', {
            class: 'slider__display_container',
        });
        return $displayContainer;
    };
    return SliderValuesDisplay;
}());
/* harmony default export */ var values_display_values_display = (SliderValuesDisplay);

// CONCATENATED MODULE: ./src/view/view.ts
var view_assign = (undefined && undefined.__assign) || function () {
    view_assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return view_assign.apply(this, arguments);
};





var view_SliderView = /** @class */ (function () {
    function SliderView(container, options) {
        this.$container = $(container);
        this.viewOptions = options;
        this.observers = new Set();
        this.$view = this.createView();
        this.$barContainer = $('<div>', { class: 'slider__bar_container' });
        this.$view.append(this.$barContainer);
        this.isRendered = false;
    }
    SliderView.prototype.render = function (renderData) {
        this.renderData = renderData;
        if (this.viewOptions.isHorizontal && !this.$view.hasClass('slider__container_horizontal')) {
            this.$view.addClass('slider__container_horizontal');
        }
        if (!this.viewOptions.isHorizontal && this.$view.hasClass('slider__container_horizontal')) {
            this.$view.removeClass('slider__container_horizontal');
        }
        if (!this.isRendered) {
            this.attachEventHandlers();
            this.$container.append(this.$view);
            this.isRendered = true;
        }
        this.updateValuesDisplay(renderData);
        this.updateScale(renderData);
        this.updateBar(renderData.percentage);
        this.updateRunners(renderData);
    };
    SliderView.prototype.update = function (viewData) {
        var state = view_assign(view_assign({}, this.viewOptions), this.validateData(viewData));
        this.viewOptions = state;
        this.$view.data('options', state);
        if (this.renderData) {
            this.render(this.renderData);
        }
    };
    SliderView.prototype.addObserver = function (observer) {
        this.observers.add(observer);
    };
    SliderView.prototype.removeObserver = function (observer) {
        this.observers.delete(observer);
    };
    SliderView.prototype.getData = function () {
        return this.viewOptions;
    };
    SliderView.prototype.destroy = function () {
        if (this.bar)
            this.bar.destroy();
        if (this.scale)
            this.scale.destroy();
        if (this.runner)
            this.runner.destroy();
        if (this.secondRunner)
            this.secondRunner.destroy();
        if (this.valueDisplay)
            this.valueDisplay.destroy();
        this.$view.remove();
        this.isRendered = false;
    };
    SliderView.prototype.createView = function () {
        var viewOptions = this.viewOptions;
        var $view = $('<div>', {
            class: 'js-slider__container slider__container',
        });
        $view.data('options', viewOptions);
        return $view;
    };
    SliderView.prototype.updateBar = function (percentage) {
        if (this.viewOptions.bar && this.bar) {
            this.bar.update({
                data: percentage,
                options: this.viewOptions,
            });
        }
        if (this.viewOptions.bar && !this.bar) {
            this.bar = new src_bar_bar({ $viewContainer: this.$barContainer });
            this.bar.update({
                data: percentage,
                options: this.viewOptions,
            });
        }
        if (!this.viewOptions.bar && this.bar) {
            this.bar.destroy();
        }
    };
    SliderView.prototype.updateScale = function (renderData) {
        if (this.viewOptions.scale && this.scale) {
            this.scale.update({
                data: renderData,
                options: this.viewOptions,
            });
        }
        if (this.viewOptions.scale && !this.scale) {
            this.scale = new src_scale_scale({ $viewContainer: this.$view });
            this.scale.update({
                data: renderData,
                options: this.viewOptions,
            });
        }
        if (!this.viewOptions.scale && this.scale) {
            this.scale.destroy();
        }
    };
    SliderView.prototype.updateValuesDisplay = function (renderData) {
        if (this.viewOptions.displayValue && this.valueDisplay) {
            this.valueDisplay.update(renderData, this.viewOptions);
        }
        if (this.viewOptions.displayValue && !this.valueDisplay) {
            this.valueDisplay = new values_display_values_display({ $viewContainer: this.$view });
            this.valueDisplay.update(renderData, this.viewOptions);
        }
        if (!this.viewOptions.displayValue && this.valueDisplay) {
            this.valueDisplay.destroy();
        }
    };
    SliderView.prototype.updateRunners = function (renderData) {
        if (this.viewOptions.runner) {
            if (Array.isArray(renderData.value)) {
                if (this.runner) {
                    this.runner.update(renderData, this.viewOptions);
                }
                else {
                    this.runner = new src_runner_runner({
                        $viewContainer: this.$barContainer,
                        isSecond: false,
                    });
                    this.runner.update(renderData, this.viewOptions);
                }
                if (this.secondRunner) {
                    this.secondRunner.update(renderData, this.viewOptions);
                }
                else {
                    this.secondRunner = new src_runner_runner({
                        $viewContainer: this.$barContainer,
                        isSecond: true,
                    });
                    this.secondRunner.update(renderData, this.viewOptions);
                }
            }
            else if (this.runner) {
                this.runner.update(renderData, this.viewOptions);
            }
            else {
                this.runner = new src_runner_runner({
                    $viewContainer: this.$barContainer,
                    isSecond: false,
                });
                this.runner.update(renderData, this.viewOptions);
            }
        }
        else {
            if (this.runner) {
                this.runner.destroy();
            }
            if (this.secondRunner) {
                this.secondRunner.destroy();
            }
        }
        if (!this.viewOptions.range && this.secondRunner) {
            this.secondRunner.destroy();
        }
    };
    SliderView.prototype.notify = function (action) {
        switch (action.event) {
            case 'start':
                this.observers.forEach(function (observer) {
                    observer.start();
                });
                break;
            case 'change':
                this.observers.forEach(function (observer) {
                    observer.change(action.value);
                });
                break;
            case 'finish':
                this.observers.forEach(function (observer) {
                    observer.finish();
                });
                break;
            default:
                break;
        }
    };
    SliderView.prototype.attachEventHandlers = function () {
        this.$view.bind('startChanging.myMVPSlider', this.startChangingHandler.bind(this));
        this.$view.bind('changeValue.myMVPSlider', this.changeValueHandler.bind(this));
        this.$view.bind('finish.myMVPSlider', this.finishEventHandler.bind(this));
    };
    SliderView.prototype.startChangingHandler = function (event, isDragStarted) {
        var startAction = { event: 'start' };
        this.notify(startAction);
        var startValue = this.renderData.percentage;
        if (isDragStarted && Array.isArray(startValue)) {
            var dragHandler = this.makeDragHandler(startValue);
            var dropHandler = this.makeDropHandler();
            this.$view.bind('dragRange.myMVPSlider', dragHandler);
            this.$view.bind('dropRange.myMVPSlider', dropHandler);
        }
    };
    SliderView.prototype.makeDragHandler = function (start) {
        var _this = this;
        var dragHandler = function (event, dragDistance) {
            var valuesDiff = start[1] - start[0];
            var newVal = start[0] + dragDistance;
            var newSecondVal = start[1] + dragDistance;
            if (newVal < 0) {
                newVal = 0;
                newSecondVal = newVal + valuesDiff;
            }
            if (newSecondVal > 100) {
                newSecondVal = 100;
                newVal = newSecondVal - valuesDiff;
            }
            var changeAction = { event: 'change', value: [newVal, newSecondVal] };
            _this.notify(changeAction);
        };
        return dragHandler;
    };
    SliderView.prototype.makeDropHandler = function () {
        var _this = this;
        var dragHandler = function () {
            var finishAction = { event: 'finish' };
            _this.notify(finishAction);
            _this.$view.unbind('dragRange.myMVPSlider', false);
            _this.$view.unbind('dropRange.myMVPSlider', false);
        };
        return dragHandler;
    };
    SliderView.prototype.changeValueHandler = function (event, value, isSecond) {
        var currentValue = this.renderData.percentage;
        var changeAction;
        if (isSecond && Array.isArray(currentValue)) {
            changeAction = { event: 'change', value: [currentValue[0], value] };
        }
        else if (Array.isArray(currentValue)) {
            changeAction = { event: 'change', value: [value, currentValue[1]] };
        }
        else {
            changeAction = { event: 'change', value: value };
        }
        this.notify(changeAction);
    };
    SliderView.prototype.finishEventHandler = function () {
        var finishAction = { event: 'finish' };
        this.notify(finishAction);
    };
    SliderView.prototype.validateData = function (data) {
        var _this = this;
        var dataEntries = Object.entries(data);
        var validData = dataEntries.map(function (entry) {
            var key = entry[0];
            switch (key) {
                case 'isHorizontal':
                case 'range':
                case 'dragInterval':
                case 'runner':
                case 'bar':
                case 'scale':
                case 'displayScaleValue':
                case 'displayValue':
                case 'displayMin':
                case 'displayMax':
                    if (typeof entry[1] === 'boolean') {
                        return entry;
                    }
                    break;
                case 'scaleStep':
                    if (SliderView.isValidStep(entry[1])) {
                        return entry;
                    }
                    break;
                case 'prefix':
                case 'postfix':
                    if (typeof entry[1] === 'string') {
                        return entry;
                    }
                    break;
                default:
                    return undefined;
            }
            return [key, _this.viewOptions[key]];
        });
        var resultData = validData.reduce(function (acc, _a) {
            var _b;
            var k = _a[0], v = _a[1];
            return (view_assign(view_assign({}, acc), (_b = {}, _b[k] = v, _b)));
        }, {});
        return resultData;
    };
    SliderView.isValidStep = function (value) {
        if (typeof value === 'number') {
            return Number.isFinite(value) && (value > 0);
        }
        return false;
    };
    return SliderView;
}());
/* harmony default export */ var view_view = (view_SliderView);

// CONCATENATED MODULE: ./src/app/app.ts
var app_assign = (undefined && undefined.__assign) || function () {
    app_assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return app_assign.apply(this, arguments);
};
/* eslint-disable no-useless-return */
/* eslint-disable class-methods-use-this */
/* eslint-disable @typescript-eslint/no-unused-vars */
/* eslint-disable @typescript-eslint/no-extra-semi */



var app_SliderApp = /** @class */ (function () {
    function SliderApp(options, node) {
        this.initOptions = options;
        this.node = node;
        this.createModel();
        this.createView();
        this.createPresenter();
    }
    SliderApp.prototype.update = function (options) {
        this.options = app_assign(app_assign(app_assign({}, this.initOptions), this.options), options);
        this.presenter.update(options);
    };
    ;
    SliderApp.prototype.getAllData = function () {
        return this.presenter.getAllData();
    };
    SliderApp.prototype.getModelData = function () {
        return this.presenter.getModelData();
    };
    SliderApp.prototype.getViewData = function () {
        return this.presenter.getViewData();
    };
    SliderApp.prototype.getPresenterData = function () {
        return this.presenter.getPresenterData();
    };
    SliderApp.prototype.reset = function () {
        this.options = this.initOptions;
        this.update(this.initOptions);
    };
    SliderApp.prototype.destroy = function () {
        this.view.destroy();
    };
    SliderApp.prototype.createModel = function () {
        var _a = this.initOptions, maxValue = _a.maxValue, minValue = _a.minValue, step = _a.step, value = _a.value, secondValue = _a.secondValue;
        this.model = new model({
            maxValue: maxValue,
            minValue: minValue,
            step: step,
            value: value,
            secondValue: secondValue,
        });
    };
    SliderApp.prototype.createPresenter = function () {
        var _a = this.initOptions, dataValues = _a.dataValues, onStart = _a.onStart, onChange = _a.onChange, onFinish = _a.onFinish, onUpdate = _a.onUpdate;
        this.presenter = new presenter({
            model: this.model,
            view: this.view,
            dataValues: dataValues,
            onStart: onStart,
            onChange: onChange,
            onFinish: onFinish,
            onUpdate: onUpdate,
        });
    };
    SliderApp.prototype.createView = function () {
        var _a = this.initOptions, isHorizontal = _a.isHorizontal, range = _a.range, dragInterval = _a.dragInterval, runner = _a.runner, bar = _a.bar, scale = _a.scale, scaleStep = _a.scaleStep, displayScaleValue = _a.displayScaleValue, displayValue = _a.displayValue, displayMin = _a.displayMin, displayMax = _a.displayMax, prefix = _a.prefix, postfix = _a.postfix;
        this.view = new view_view(this.node, {
            isHorizontal: isHorizontal,
            range: range,
            dragInterval: dragInterval,
            runner: runner,
            bar: bar,
            scale: scale,
            scaleStep: scaleStep,
            displayScaleValue: displayScaleValue,
            displayValue: displayValue,
            displayMin: displayMin,
            displayMax: displayMax,
            prefix: prefix,
            postfix: postfix,
        });
    };
    return SliderApp;
}());
/* harmony default export */ var app_app = (app_SliderApp);

// CONCATENATED MODULE: ./src/plugin/plugin.ts
/* eslint-disable no-param-reassign */

(function ($) {
    $.fn.myMVPSlider = function (options) {
        var settings = $.extend({
            maxValue: 100,
            minValue: 0,
            step: 1,
            value: 0,
            secondValue: undefined,
            // view
            isHorizontal: true,
            range: false,
            dragInterval: false,
            runner: true,
            bar: true,
            scale: false,
            scaleStep: 1,
            displayScaleValue: false,
            displayValue: false,
            displayMin: false,
            displayMax: false,
            prefix: '',
            postfix: '',
            // presenter
            dataValues: [],
            // callbacks
            onStart: function () { },
            onChange: function () { },
            onFinish: function () { },
            onUpdate: function () { },
        }, options);
        this.each(function addPlugin() {
            var $this = $(this);
            var app = new app_app(settings, this);
            $this.data('myMVPSlider', app);
        });
        return this;
    };
}(jQuery));


/***/ })
/******/ ]);
});